#!/bin/sh


## template for RBSS log backup

## expected logrotate has been already set up as following:
# /etc/logrotate.conf
# or
# /etc/logrotate.d/tomcat.conf :

    # /u00/tomcat/logs/catalina.out
    # {
        # su opc opc
        # daily
        # rotate 7
        # compress
        # notifempty
        # missingok
        # copytruncate
    # }

## 
# source $HOME/.bashrc
# or setup PATH, ENV manually
testmode=1

PROGNAME=rbssbackup
BKPPLANNER=full_logs_daily

RCPT_TO=will.jiang@vtb.com
APPROOT_DIR=/u00
LOGROTATE_CONF=/etc/logrotate.conf
BKPPOLICY=test_tomcat_logs
NOTIFYMSG=${APPROOT_DIR}/${PROGNAME}.msg
declare -a MODULES=("mca" "mcm" "router")

if [ -z testmode ]; then
	BPBACKUP=/usr/openv/netbackup/bin/bpbackup
	LOGROTATE=/usr/sbin/logrotate
	SENDMAIL="/usr/sbin/sendmail"
	SENDMAILCMD="${SENDMAIL} ${RCPT_TO} < ${NOTIFYMSG}"
else 
	BPBACKUP="echo bpbackup" 
	LOGROTATE="echo logrotate"
	SENDMAIL=echo
	SENDMAILCMD="cat ${NOTIFYMSG}"
fi

die() {
	echo $* | ${SENDMAIL} ${RCPT_TO}
	exit 7
}

notify() {
    echo $* >> ${NOTIFYMSG} 2>&1
}

backup_module() {
	MODULE_DIR=$1
	LOG_SOURCE_DIR=$2
	logdir=${APPROOT_DIR}/${MODULE_DIR}/${LOG_SOURCE_DIR}
	backup_dir=${APPROOT_DIR}/${MODULE_DIR}/~inprocess
	taped_dir=${APPROOT_DIR}/${MODULE_DIR}/~taped
	notsaved_dir=${APPROOT_DIR}/${MODULE_DIR}/~notsaved
	
	notify "processing ${logdir}..."
	# make sure log backup directory exists
	mkdir -p ${backup_dir} ${taped_dir} ${notsaved_dir} || notify "Error creating aux directory: ${backup_dir} ${taped_dir} ${notsaved_dir}"
	
	#find ${logdir} -type f -mtime +1 | xargs echo >> ${NOTIFYMSG} 2>&1
	find ${logdir} -regex ".*\.\(log\|zip\)" -type f -mtime +1 -exec mv {} ${backup_dir}/ \; -print >>${NOTIFYMSG} 2>&1
	
    ${BPBACKUP} -p ${BKPPOLICY} -s ${BKPPLANNER} -w ${backup_dir}
    rc=$?
    if [[ 0 != ${rc} ]] ; then
        notify "Backup ${MODULE_DIR} failed with ${rc}."
		mv ${backup_dir}/* ${notsaved_dir}/
    else
        notify "Backup ${MODULE_DIR} succeeded with ${rc}."
		mv ${backup_dir}/* ${taped_dir}/
		## or move links only
		# find ${backup_dir} -xtype l | xargs rm -f {}
    fi
}

backup_tomcat() {
#	forced run logrotate to truncate catalina.out
	${LOGROTATE} ${LOGROTATE_CONF}

	backup_module $*
}

onexit() {
	${SENDMAILCMD}
# remove all outdated logs, older than 2 weeks 
	# find ${APPROOT_DIR} -path '*/taped/*' -o -path '*/logs/*' -type f -mtime +14 | xargs rm -f {}
	# rm -f ${NOTIFYMSG}
	find ${APPROOT_DIR} -path '*/taped/*' -o -path '*/logs/*' -type f -mtime +14 | xargs echo "to unlink: " {}
}

#main
trap onexit INT TERM

cat /dev/null > ${NOTIFYMSG} || die "FATAL ERROR: failed writing to ${NOTIFYMSG}" 

backup_tomcat "tomcat" "logs"

for module in "${MODULES[@]}"; do
	backup_module ${module} "logs"
done;
notify "End of $PROGNAME"
onexit
